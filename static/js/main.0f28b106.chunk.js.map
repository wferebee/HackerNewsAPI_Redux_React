{"version":3,"sources":["components/Header.js","components/SearchResults.js","Redux/getQuery.js","Redux/actionTypes.js","Redux/dataReducer.js","Redux/queryReducer.js","Redux/store.js","App.js","Redux/fetchData.js","index.js"],"names":["Header","className","SearchResults","props","key","id","href","URL","target","Title","Author","Comments","Points","getQuery","Query","QueryId","type","payload","dataReducer","state","Id","queries","action","text","middleware","thunk","allReducers","combineReducers","results","queryReducer","store","createStore","applyMiddleware","connect","dispatch","input","fetchData","fetch","then","response","json","res","useState","setInput","onChange","e","value","onKeyUp","console","log","getState","placeholder","onClick","preventDefault","length","hits","map","index","url","title","author","num_comments","points","ReactDOM","render","document","getElementById"],"mappings":"uMAWgBA,EATA,WAEZ,OACI,yBAAKC,UAAY,UACf,wBAAIA,UAAY,cAAhB,8BCgCMC,EApCO,SAACC,GAEpB,OACI,yBAAKF,UAAY,cAEb,wBACIA,UAAY,eACZG,IAAOD,EAAME,IAGZF,EAAME,GAAK,EALhB,IAMI,uBAAGC,KAAI,UAAMH,EAAMI,KAAOC,OAAO,UAAjC,IAA2C,0BAAMP,UAAY,wBAAwBE,EAAMM,OAA3F,KANJ,IAQI,6BARJ,KAUI,yBAAKR,UAAU,cAEH,0BAAMA,UAAY,2BAAlB,UACA,0BAAMA,UAAY,yBAAyBE,EAAMO,QAH7D,QAKe,0BAAMT,UAAY,6BAAlB,YACH,0BAAMA,UAAY,2BAAlB,IAA8CE,EAAMQ,SAApD,KANZ,QAQe,0BAAMV,UAAY,2BAAlB,UACH,0BAAMA,UAAY,yBAAlB,IAA4CE,EAAMS,OAAlD,OAOhB,6BA5BJ,MCHG,IAQIC,EARa,SAACC,EAAOC,GAAR,MAAqB,CACrCC,KCHa,YDIbC,QAAQ,CACJH,QACAC,a,cEIDG,EARK,WAAkC,IAAjCC,EAAgC,uDAAxB,GAAwB,yCAAnBH,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACpC,OAAOD,GACH,IDHkB,aCIlB,OAAOC,EACP,QACJ,OAAOE,I,QCJPC,EAAK,EAiBMC,EAhBQ,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIG,EAAW,uCAC7C,OAAQA,EAAON,MACX,IFNmB,YEOnB,MAAM,GAAN,mBACKG,GADL,CACW,CACLd,GAAIe,IACJG,KAAMD,EAAOL,QAAQH,SAI3B,QACI,OAAOK,ICVXK,EAAa,C,MAACC,GAEdC,EAAcC,YAAgB,CAACC,QAASV,EAAaG,QAASQ,IAWrDC,EAFDC,YAAYL,EALL,CACjBE,QAAS,GACTP,QAAS,IAGwCW,IAAe,WAAf,EAAmBR,ICyDxE,IAWeS,eAXS,SAACd,GACrB,MAAO,CACTS,QAAST,EAAMS,YAGU,SAACM,GACxB,MAAO,CACPrB,SAAU,SAACsB,GAAD,OAAWD,EAASrB,EAASsB,KACvCC,UAAW,SAACD,GAAD,OAAUD,EC/EV,SAAmBC,GAC9B,OAAO,SAAAD,GACPG,MAAM,8CAAD,OAA+CF,IACnDG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAIP,EAAS,CAAClB,KLLD,aKKiBC,QAAQwB,QD2EjBL,CAAUD,QAG7BF,EA5Ef,SAAa9B,GAAQ,IAAD,EAEQuC,mBAAS,IAFjB,mBAEXP,EAFW,KAEJQ,EAFI,KAmBhB,OAEI,yBAAK1C,UAAU,OAEX,kBAAC,EAAD,MAEA,yBAAKA,UAAU,QACX,2BACIA,UAAY,YACZ2C,SAAU,SAACC,GAAD,OAAOF,EAASR,EAAQU,EAAErC,OAAOsC,QAC3CC,QAlBO,SAACF,GACN,UAAVA,EAAEzC,MACFD,EAAMU,SAASsB,GACfhC,EAAMiC,UAAUD,GAChBa,QAAQC,IAAInB,EAAMoB,WAAW7B,WAerByB,MAAOX,EAAOgB,YAAa,SAC3BnC,KAAK,SAGT,4BAASoC,QA9BH,SAACP,GACfA,EAAEQ,iBACFlD,EAAMU,SAASsB,GACfhC,EAAMiC,UAAUD,GAChBa,QAAQC,IAAInB,EAAMoB,WAAW7B,WA0BrB,OATJ,gBAaElB,EAAMyB,SAAoC,IAAzBzB,EAAMyB,QAAQ0B,OAO7B,yBAAKrD,UAAW,oBAAhB,8BACKE,EAAMyB,QAAQ2B,KAAKC,KAAI,SAAC5B,EAAS6B,GAAV,OAAoB,kBAAC,EAAD,CACxCrD,IAAOqD,EACPpD,GAAMoD,EACNlD,IAAOqB,EAAQ8B,IACfjD,MAASmB,EAAQ+B,MACjBjD,OAAUkB,EAAQgC,OAClBjD,SAAYiB,EAAQiC,aACpBjD,OAAUgB,EAAQkC,aAb1B,yBAAK7D,UAAY,qBACb,8DACA,oEArBZ,gB,MErBR8D,IAASC,OACL,kBAAC,IAAD,CAAUlC,MAAOA,GACb,kBAAC,EAAD,OACSmC,SAASC,eAAe,W","file":"static/js/main.0f28b106.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n const Header = () => {\r\n    \r\n    return (\r\n        <div className = \"Header\">\r\n          <h1 className = \"HeaderText\"> Hacker News API Search </h1> \r\n        </div>\r\n    );\r\n }\r\n\r\n export default Header;\r\n","import React from 'react';\r\n\r\n const SearchResults = (props) => {\r\n    \r\n    return (\r\n        <div className = \"AllResults\">\r\n            \r\n            <dt \r\n                className = \"ResultsTable\"\r\n                key = {props.id}> \r\n                                            {/*   passed key as id because I dont have a stable Id for the results, so I just use the index+1 so\r\n                                                when it renders the first item starts at 1  */}\r\n                {props.id + 1}.\r\n                <a href={`${ props.URL}`} target=\"_blank\"> <span className = \"ResultInfo TitleInfo\">{props.Title}</span> </a> {/* combined the title and the url */}\r\n                                            {/* target =_blank allows the user to open the link in a new tab, but React does not like this, need to find a safer way in the future */}\r\n                <br></br>  {/* all other rendered info will be on a line below hthe title */}\r\n\r\n                <div className=\" ExtraInfo\">\r\n                                                                                            \r\n                            <span className = \"ResultDescriptor Author\">Author</span>    \r\n                            <span className = \"ResultInfo AuthorInfo\">{props.Author}</span>\r\n\r\n                        &nbsp; <span className = \"ResultDescriptor Comments\">Comments</span>\r\n                            <span className = \"ResultInfo CommentsInfo\">({props.Comments})</span>\r\n\r\n                        &nbsp; <span className = \"ResultDescriptor Points\" >Points</span>\r\n                            <span className = \"ResultInfo PointsInfo\">({props.Points})</span> \r\n                                                                                            {/* I use <span></span> a lot for lack of a better ay to styleize certain words, \r\n                                                                                            for example the word author being shorter and a differnt color than te actual \r\n                                                                                            authors name it i sitting next to on the page */}\r\n                </div>\r\n            </dt>      \r\n\r\n            <br></br> {/* another line break between results since this component is being mapped over and used 20 times */}\r\n        </div>\r\n    );\r\n }\r\n\r\n export default SearchResults;\r\n","import { GET_QUERY } from \"./actionTypes\"\r\n\r\n    export const getQuery = (Query, QueryId) => ({\r\n            type: GET_QUERY,\r\n            payload:{ \r\n                Query,  // here i want to store the query and give it an associated Id because that is part of the assignment\r\n                QueryId\r\n        }}\r\n    )\r\n\r\nexport default getQuery;","export const GET_QUERY = \"GET_QUERY\";\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\n\r\n// I am stil getting used to Redux, I have only used it on a hanful of projects -\r\n// it seems like good practice to have an actionTypes page to keep as a quick reference. I only have two here,\r\n// so its not that complex of an application, but I wanted to follow best pracices.","import { FETCH_DATA } from './actionTypes';\r\n\r\nconst dataReducer = (state = {}, {type, payload}) => {\r\n    switch(type) {\r\n        case FETCH_DATA :              // typical switch statement commonly used in Redux, especially when there are multiple cases and reducers\r\n        return payload\r\n        default :\r\n    return state\r\n};\r\n};\r\nexport default dataReducer;","import { GET_QUERY } from './actionTypes';\r\n\r\n\r\nlet Id = 0\r\nexport const queries = (state = [], action) => {\r\n  switch (action.type) {\r\n      case GET_QUERY: \r\n      return [\r\n        ...state,{\r\n            id: Id ++,\r\n            text: action.payload.Query,\r\n            \r\n        }\r\n    ]\r\n      default: \r\n          return state;\r\n      \r\n  }\r\n}\r\n\r\nexport default queries;","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport dataReducer from './dataReducer';\r\nimport queryReducer from \"./queryReducer\";\r\nimport thunk from 'redux-thunk';  // redux middleware for async actions and api calls\r\n\r\nconst middleware = [thunk];\r\n\r\nconst allReducers = combineReducers({results: dataReducer, queries: queryReducer}); // like a root reducer\r\n// sometimes would have this in another filr or folder especially hen there are many reducers to combine.\r\n// its just good practice to have a root reducer or to use redux's combine reducer which I did here.\r\n\r\nconst initialState = {     \r\n    results: [],\r\n    queries: [],\r\n};\r\n\r\nconst store = createStore(allReducers, initialState, applyMiddleware(...middleware));\r\n\r\nexport default store;\r\n\r\n","import React , { useState } from 'react';           //import useState hook which is needed because this is a functional component\nimport Header from \"./components/Header\";           // I was asked about hooks in the interview, so i wanted to complete the assignment with only functional components\nimport SearchResults from \"./components/SearchResults\";\nimport fetchData from './Redux/fetchData';\nimport getQuery from \"./Redux/getQuery\";\nimport {connect} from 'react-redux';\nimport store from './Redux/store';\n\nfunction App(props) {\n\n    let [input, setInput] = useState(\"\");       // setting state in functinoal component\n \n    const grabQuery = (e) => {                  // basically my submit function, want to clean this up in the future\n        e.preventDefault();\n        props.getQuery(input);\n        props.fetchData(input);\n        console.log(store.getState().queries);  // left this in here so that you can see im storing the user queries\n    }\n\n    const handleKeyPress = (e) => {             // on Enter function, basically the same as the above function,        \n        if (e.key === \"Enter\") {                // I tired to clean this up, but I kept getting errors and it as getting late and I wanted to submit this.\n            props.getQuery(input);              // on the plus side, I think this is less convoluted and it's clear whats happening withput having to search all over\n            props.fetchData(input);\n            console.log(store.getState().queries);      // left this in here so that you can see im storing the user queries\n        }\n    }; \n\n    return (\n        \n        <div className=\"App\">\n\n            <Header />\n\n            <div className='head'>\n                <input \n                    className = \"SearchBox\"\n                    onChange={(e) => setInput(input = e.target.value)} // using setState hook equivelant of this.setState\n                    onKeyUp={handleKeyPress}        // on enter search\n                    value={input} placeholder={\"search\"}\n                    type=\"text\"\n                    />\n\n                <button  onClick={grabQuery}>Go!</button>            {/*  on submit search */}\n                \n            </div>\n        \n            {!props.results || props.results.length === 0 ?      // ternary conditional rendering\n                                                                        // if no results exist ( when the page loads) then only return a welcome messgae\n                <div className = \" NoResultsHeaders\">\n                    <h1>WELCOME TO THE HACKER NEWS API</h1> \n                    <h3>Try Searching Something Interesting</h3> \n                </div>\n\n            :   <div className =\"SearchResultsBox\">                           {/*  if results do exist then map over them and send them to <SearchResults /> */}\n                    {props.results.hits.map((results, index) => <SearchResults \n                        key = {index}   // using index becuase I have no stable id\n                        id = {index}    // using index so I can call key =props.id on <SearchResults />\n                        URL = {results.url}\n                        Title = {results.title} // need to include validation. ex. if title does not exist, do not render anything for that result\n                        Author = {results.author} // think i could use reduce first maybe?\n                        Comments = {results.num_comments} \n                        Points = {results.points}\n                        />\n                        \n                    )} \n                </div> \n            }         {/*  I think I could find a less expensive way of rendinerg the results. Having 20 <SearchResult components doesnt seem efficient.\n                        Also I wanted split the main app and <SearchResults into two components because of standard practices, but it was honestly more code and seems less efficient.\n                       but if the app ever got more complex i know its a good idea to have copmonents split into there smallest managable, reasonable pieces. */}\n        </div>\n    );\n};\n\nconst MapStateToProps = (state) => {\n    return {\n  results: state.results\n};\n};\nconst MapDispatchToProps = (dispatch) => {\n    return {\n    getQuery: (input) => dispatch(getQuery(input)),\n    fetchData: (input)=> dispatch(fetchData(input))\n};\n};\nexport default connect(MapStateToProps, MapDispatchToProps)(App);","import { FETCH_DATA } from \"./actionTypes\";\r\n\r\nexport default function fetchData(input) {\r\n    return dispatch => {                                         // no api key\r\n    fetch(`https://hn.algolia.com/api/v1/search?query=${input}`) //template literal for injecting our variable\r\n    .then(response => response.json())       // turn response into json format\r\n    .then(res => dispatch({type:FETCH_DATA,payload:res}))  \r\n    //.then(response => { console.log(response)})  // uncomment this to console log the results to get more info\r\n    \r\n    \r\n};\r\n};\r\n// I didnt know if I should include setting filters for the API. I actually spent a few hours setting up the actual Alogilia API before I \r\n// realized I didnt need to do that. Then I thought about having the API bring up results as you type - in the same way the \r\n//algolia api does. I got that to work but then wasnt sure if it would work the same when I implemented redux, so I scrapped it, \r\n//but I do plan on implementing it soon, as well as filters. Seems like it would be a fun project.\r\n\r\n// I realize these were unnecesary comments but I just wanted for whoever reads this to understand my thought process in finishing the test\r\n// the way I did.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./style.css\";\n\nimport store from './Redux/store.js'\nimport {Provider} from 'react-redux'\n//wrapping App in the proider\nReactDOM.render(\n    <Provider store={store}>          \n        <App />\n    </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}